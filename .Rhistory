rm(list = ls())
library(phytools)
library(ape)
par(mfrow=c(1,2))
tree = read.tree("gp60.tre")
x<-tree$tip.label
x1 = sapply(strsplit(x, split='_', fixed=TRUE),function(x) (x[3]))
tree$tip.label<-x1
tree<-ladderize(tree)
colorCodes <- c(rainbow(length(unique(tree$tip.label))))
names(colorCodes)<-unique(tree$tip.label)
plotTree(tree,ftype="off",main='Species')
add.scale.bar(x=0.5,y=1)
rm(list = ls())
library(phytools)
library(ape)
par(mfrow=c(1,2))
tree = read.tree("gp60.tre")
getwd()
setwd("~/GitHub/protozoa")
par(mfrow=c(1,2))
tree = read.tree("gp60.tre")
x<-tree$tip.label
x1 = sapply(strsplit(x, split='_', fixed=TRUE),function(x) (x[3]))
tree$tip.label<-x1
tree<-ladderize(tree)
colorCodes <- c(rainbow(length(unique(tree$tip.label))))
names(colorCodes)<-unique(tree$tip.label)
plotTree(tree,ftype="off",main='Species')
add.scale.bar(x=0.5,y=1)
tiplabels(#x1, # if text
col = colorCodes[tree$tip.label],bg=NA,frame = 'none',pch=16)
add.simmap.legend(colors=colorCodes,vertical=T,x=0.8,y=550,
y=-1,prompt=FALSE)
tree = read.tree("gp60.tre")
x<-tree$tip.label
x1 = sapply(strsplit(x, split='_', fixed=TRUE),function(x) (x[2]))
tree$tip.label<-x1
tree<-ladderize(tree)
colorCodes <- c(rainbow(length(unique(tree$tip.label))))
names(colorCodes)<-unique(tree$tip.label)
plotTree(tree,ftype="off")
add.scale.bar(x=0.5,y=1)
tiplabels(#x1, # if text
col = colorCodes[tree$tip.label],bg=NA,frame = 'none',pch=16)
add.simmap.legend(colors=colorCodes,vertical=T,x=0.8,y=550,
y=-1,prompt=FALSE)
x<-tree$tip.label
x
tree = read.tree("gp60.tre")
x<-tree$tip.label
x
x1 = sapply(strsplit(x, split='_', fixed=TRUE),function(x) (x[2]))
tree1<-tree
tree1$tip.label<-x1
x2 = sapply(strsplit(x, split='_', fixed=TRUE),function(x) (x[3]))
tree2<-tree
tree2$tip.label<-x2
obj<-cophylo(tree1,tree2,rotate = F)
tree1<-rtree(40) #random tree with 40 leaves
tree2<-rtree(20) #random tree with 20 leaves
association<-matrix(ncol=2, nrow=40)
association[,1]<-association[,2]<-tree2$tip.label
plot(tree1)
plot(tree2)
association
cophyloplot(tree1, tree2, assoc=association, length.line=4, space=28, gap=3)
length(x2)
x2
association<-matrix(ncol=2, nrow=length(x2))
association[,1]<-association[,2]<-tree$tip.label
head(association)
tree = read.tree("gp60.tre")
x<-tree$tip.label
x1 = sapply(strsplit(x, split='_', fixed=TRUE),function(x) (x[2]))
tree1<-tree
tree1$tip.label<-x1
x2 = sapply(strsplit(x, split='_', fixed=TRUE),function(x) (x[3]))
tree2<-tree
tree2$tip.label<-x2
association<-matrix(ncol=2, nrow=length(x2))
association[,1]<-association[,2]<-tree$tip.label
obj<-cophylo(tree1,tree2,rotate = F)
obj<-cophylo(tree1,tree2,assoc=association, rotate = F)
plot(obj,cex=0.01)
tree1$tip.label
tree2$tip.label
tree1<-rtree(40) #random tree with 40 leaves
tree2<-rtree(20) #random tree with 20 leaves
association<-matrix(ncol=2, nrow=40)
association[,1]<-association[,2]<-tree2$tip.label
association
tree = read.tree("gp60.tre")
x<-tree$tip.label
x1 = sapply(strsplit(x, split='_', fixed=TRUE),function(x) (x[2]))
x1
tree1<-tree
tree1$tip.label<-x1
x2 = sapply(strsplit(x, split='_', fixed=TRUE),function(x) (x[2]))
tree2<-tree
tree2$tip.label<-x2
association<-matrix(ncol=2, nrow=length(x2))
association[,1]<-association[,2]<-tree$tip.label
obj<-cophylo(tree1,tree2,assoc=association, rotate = F)
plot(obj,cex=0.01)
tree2$tip.label
tree1$tip.label
association[,1]<-association[,2]<-tree1$tip.label
obj<-cophylo(tree1,tree2,assoc=association, rotate = F)
plot(obj,cex=0.01)
tree = read.tree("gp60.tre")
x<-tree$tip.label
x1 = sapply(strsplit(x, split='_', fixed=TRUE),function(x) (x[2]))
tree1<-tree
tree1$tip.label<-x1
x2 = sapply(strsplit(x, split='_', fixed=TRUE),function(x) (x[2]))
tree2<-tree
tree2$tip.label<-x2
association<-matrix(ncol=2, nrow=length(x2))
association[,1]<-association[,2]<-tree1$tip.label
obj<-cophylo(tree1,tree2,assoc=association, rotate = F)
plot(obj,cex=0.01)
association
obj<-cophylo(tree1,tree2,assoc=association, rotate = T)
source('~/GitHub/protozoa/Trees_genes.R', echo=TRUE)
tree1<-rtree(40) #random tree with 40 leaves
tree2<-rtree(20) #random tree with 20 leaves
association<-matrix(ncol=2, nrow=40)
association[,1]<-association[,2]<-tree2$tip.label
cophyloplot(tree1, tree2, assoc=association, length.line=4, space=28, gap=3)
cophyloplot(tree1, tree2, assoc=association, length.line=4, space=28, gap=3, rotate=TRUE)
dev.off
dev.off()
dev.off()
rm(list = ls())
library(phytools)
library(ape)
par(mfrow=c(1,2))
tree = read.tree("gp60.tre")
x<-tree$tip.label
x1 = sapply(strsplit(x, split='_', fixed=TRUE),function(x) (x[3]))
tree$tip.label<-x1
tree<-ladderize(tree)
colorCodes <- c(rainbow(length(unique(tree$tip.label))))
names(colorCodes)<-unique(tree$tip.label)
plotTree(tree,ftype="off",main='Species')
add.scale.bar(x=0.5,y=1)
tiplabels(#x1, # if text
col = colorCodes[tree$tip.label],bg=NA,frame = 'none',pch=16)
add.simmap.legend(colors=colorCodes,vertical=T,x=0.8,y=550,
y=-1,prompt=FALSE)
tree = read.tree("gp60.tre")
x<-tree$tip.label
x1 = sapply(strsplit(x, split='_', fixed=TRUE),function(x) (x[2]))
tree$tip.label<-x1
tree<-ladderize(tree)
colorCodes <- c(rainbow(length(unique(tree$tip.label))))
names(colorCodes)<-unique(tree$tip.label)
plotTree(tree,ftype="off")
add.scale.bar(x=0.5,y=1)
tiplabels(#x1, # if text
col = colorCodes[tree$tip.label],bg=NA,frame = 'none',pch=16)
add.simmap.legend(colors=colorCodes,vertical=T,x=0.8,y=550,
y=-1,prompt=FALSE)
tree = read.tree("gp60.tre")
x<-tree$tip.label
x1 = sapply(strsplit(x, split='_', fixed=TRUE),function(x) (x[2]))
tree$tip.label<-x1
tree<-ladderize(tree)
colorCodes <- c(1,2,rep(1,13))
names(colorCodes)<-unique(tree$tip.label)
plotTree(tree,ftype="off")
add.scale.bar(x=0.5,y=1)
tiplabels(#x1, # if text
col = colorCodes[tree$tip.label],bg=NA,frame = 'none',pch=16)
add.simmap.legend(colors=colorCodes,vertical=T,x=0.8,y=550,
y=-1,prompt=FALSE)
source('~/GitHub/protozoa/Trees_genes.R', echo=TRUE)
source('~/GitHub/protozoa/Trees_genes.R', echo=TRUE)
source('~/GitHub/protozoa/Trees_genes.R', echo=TRUE)
source('~/GitHub/protozoa/Trees_genes.R', echo=TRUE)
source('~/GitHub/protozoa/Trees_genes.R', echo=TRUE)
source('~/GitHub/protozoa/Trees_genes.R', echo=TRUE)
source('~/GitHub/protozoa/Trees_genes.R', echo=TRUE)
source('~/GitHub/protozoa/Trees_genes.R', echo=TRUE)
source('~/GitHub/protozoa/Trees_genes.R', echo=TRUE)
source('~/GitHub/protozoa/Trees_genes.R', echo=TRUE)
source('~/GitHub/protozoa/Trees_genes.R', echo=TRUE)
source('~/GitHub/protozoa/genetic_div_human_p.R', echo=TRUE)
rm(list = ls())
Pi_data<-read.csv('results.csv',header=T)
library(vegan)
fit <- manova(cbind(Species,Gene,Pi,Theta) ~ Zoonotic, data = Pi_data)
summary(fit, test="Pillai")
summary.aov(fit)
rm(list = ls())
Pi_data<-read.csv('results.csv',header=T)
library(vegan)
fit <- manova(cbind(Species,Gene,Pi,Theta) ~ Zoonotic, data = Pi_data)
summary(fit, test="Pillai")
summary.aov(fit)
fit <- manova(cbind(Species,Pi,Theta) ~ Gene, data = Pi_data)
summary(fit, test="Pillai")
summary.aov(fit)
gg_color_hue <- function(n) {
hues = seq(15, 375, length = n + 1)
hcl(h = hues, l = 65, c = 100)[1:n]
}
layout(matrix(c(1,2,2,3,4,4), nrow = 2, ncol = 3, byrow = TRUE))
#par(mfrow=c(2,2))
n = 2
cols = gg_color_hue(n)
plot(Pi_data$Zoonotic,Pi_data$Pi,col=cols,ylab=expression(Pi))
n = 4
cols = gg_color_hue(n)
plot(Pi_data$Gene,Pi_data$Pi,col=cols,ylab=expression(Pi))
n = 2
cols = gg_color_hue(n)
plot(Pi_data$Zoonotic,Pi_data$Theta,col=cols,ylab=expression(theta))
n = 4
cols = gg_color_hue(n)
plot(Pi_data$Gene,Pi_data$Theta,col=cols,ylab=expression(theta))
newdata <- Pi_data[ which(Pi_data$Gene =='gp60'), ]
summary(fit, test="Pillai")
summary.aov(fit)
par(mfrow=c(1,2))
n = 2
cols = gg_color_hue(n)
plot(newdata$Zoonotic,newdata$Pi,col=cols,ylab=expression(Pi))
plot(newdata$Zoonotic,newdata$Theta,col=cols,ylab=expression(theta))
rm(list = ls())
Pi_data<-read.csv('results.csv',header=T)
library(vegan)
fit <- manova(cbind(Species,Gene,Pi,Theta) ~ Zoonotic, data = Pi_data)
summary(fit, test="Pillai")
summary.aov(fit)
fit <- manova(cbind(Species,Pi,Theta) ~ Gene, data = Pi_data)
summary(fit, test="Pillai")
summary.aov(fit)
gg_color_hue <- function(n) {
hues = seq(15, 375, length = n + 1)
hcl(h = hues, l = 65, c = 100)[1:n]
}
layout(matrix(c(1,2,2,3,4,4), nrow = 2, ncol = 3, byrow = TRUE))
n = 2
cols = gg_color_hue(n)
plot(Pi_data$Zoonotic,Pi_data$Pi,col=cols,ylab=expression(Pi))
n = 4
cols = gg_color_hue(n)
plot(Pi_data$Gene,Pi_data$Pi,col=cols,ylab=expression(Pi))
n = 2
cols = gg_color_hue(n)
plot(Pi_data$Zoonotic,Pi_data$Theta,col=cols,ylab=expression(theta))
n = 4
cols = gg_color_hue(n)
plot(Pi_data$Gene,Pi_data$Theta,col=cols,ylab=expression(theta))
newdata <- Pi_data[ which(Pi_data$Gene =='gp60'), ]
fit <- manova(cbind(Species,Pi,Theta) ~ Zoonotic, data = newdata)
summary(fit, test="Pillai")
summary.aov(fit)
par(mfrow=c(1,2))
n = 2
cols = gg_color_hue(n)
plot(newdata$Zoonotic,newdata$Pi,col=cols,ylab=expression(Pi))
plot(newdata$Zoonotic,newdata$Theta,col=cols,ylab=expression(theta))
p5 <- ggplot(newdata, aes (x = Theta, y = Pi, colour = Zoonotic)) + stat_density_2d() +
ylab(expression(paste(Pi))) + xlab(expression(paste(theta)))
p6 <- ggplot(newdata, aes(x = Theta, y = Pi, colour = Zoonotic)) + geom_point() +
ylab(expression(paste(Pi))) + xlab(expression(paste(theta)))
multiplot(p5, p6, cols=2)
p5 <- ggplot(newdata, aes (x = Theta, y = Pi, colour = Zoonotic)) + stat_density_2d() +
ylab(expression(paste(Pi))) + xlab(expression(paste(theta)))
p6 <- ggplot(newdata, aes(x = Theta, y = Pi, colour = Zoonotic)) + geom_point() +
ylab(expression(paste(Pi))) + xlab(expression(paste(theta)))
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
multiplot(p5, p6, cols=2)
multiplot(p5, p6, cols=2)
rm(list = ls())
Pi_data<-read.csv('results.csv',header=T)
library(vegan)
fit <- manova(cbind(Species,Gene,Pi,Theta) ~ Zoonotic, data = Pi_data)
summary(fit, test="Pillai")
summary.aov(fit)
fit <- manova(cbind(Species,Pi,Theta) ~ Gene, data = Pi_data)
summary(fit, test="Pillai")
summary.aov(fit)
library(ggplot2)
gg_color_hue <- function(n) {
hues = seq(15, 375, length = n + 1)
hcl(h = hues, l = 65, c = 100)[1:n]
}
layout(matrix(c(1,2,2,3,4,4), nrow = 2, ncol = 3, byrow = TRUE))
n = 2
cols = gg_color_hue(n)
plot(Pi_data$Zoonotic,Pi_data$Pi,col=cols,ylab=expression(Pi))
n = 4
cols = gg_color_hue(n)
plot(Pi_data$Gene,Pi_data$Pi,col=cols,ylab=expression(Pi))
n = 2
cols = gg_color_hue(n)
plot(Pi_data$Zoonotic,Pi_data$Theta,col=cols,ylab=expression(theta))
n = 4
cols = gg_color_hue(n)
plot(Pi_data$Gene,Pi_data$Theta,col=cols,ylab=expression(theta))
gg_color_hue <- function(n) {
hues = seq(15, 375, length = n + 1)
hcl(h = hues, l = 65, c = 100)[1:n]
}
layout(matrix(c(1,2,2,3,4,4), nrow = 2, ncol = 3, byrow = TRUE))
#par(mfrow=c(2,2))
n = 2
cols = gg_color_hue(n)
plot(Pi_data$Zoonotic,Pi_data$Pi,col=cols,ylab=expression(Pi))
n = 4
cols = gg_color_hue(n)
plot(Pi_data$Gene,Pi_data$Pi,col=cols,ylab=expression(Pi))
n = 2
cols = gg_color_hue(n)
plot(Pi_data$Zoonotic,Pi_data$Theta,col=cols,ylab=expression(theta))
n = 4
cols = gg_color_hue(n)
plot(Pi_data$Gene,Pi_data$Theta,col=cols,ylab=expression(theta))
p1 <- ggplot(Pi_data, aes (x = Theta, y = Pi, colour = Zoonotic)) + stat_density_2d() +
ylab(expression(paste(Pi))) + xlab(expression(paste(theta)))
# require ('hexbin')
# ggplot(Pi_data, aes (x = Theta, y = Pi, fill = Zoonotic)) + stat_binhex (bins=2, aes (alpha = 0.5)) + ## NB alpha can be count
#   facet_grid (. ~ Zoonotic)
p2 <- ggplot(Pi_data, aes(x = Theta, y = Pi, colour = Zoonotic)) + geom_point() +
ylab(expression(paste(Pi))) + xlab(expression(paste(theta)))
# ggplot(Pi_data, aes(x = Theta, y = Pi)) + geom_point() + facet_grid(~Zoonotic)
p3 <- ggplot(Pi_data, aes (x = Theta, y = Pi, colour = Gene)) + stat_density_2d() +
ylab(expression(paste(Pi))) + xlab(expression(paste(theta)))
p4 <-ggplot(Pi_data, aes(x = Theta, y = Pi, colour = Gene)) + geom_point() +
ylab(expression(paste(Pi))) + xlab(expression(paste(theta)))
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
multiplot(p1, p2, p3, p4, cols=2)
newdata <- Pi_data[ which(Pi_data$Gene =='gp60'), ]
fit <- manova(cbind(Species,Pi,Theta) ~ Zoonotic, data = newdata)
summary(fit, test="Pillai")
summary.aov(fit)
par(mfrow=c(1,2))
n = 2
cols = gg_color_hue(n)
plot(newdata$Zoonotic,newdata$Pi,col=cols,ylab=expression(Pi))
plot(newdata$Zoonotic,newdata$Theta,col=cols,ylab=expression(theta))
p5 <- ggplot(newdata, aes (x = Theta, y = Pi, colour = Zoonotic)) + stat_density_2d() +
ylab(expression(paste(Pi))) + xlab(expression(paste(theta)))
p6 <- ggplot(newdata, aes(x = Theta, y = Pi, colour = Zoonotic)) + geom_point() +
ylab(expression(paste(Pi))) + xlab(expression(paste(theta)))
multiplot(p5, p6, cols=2)
