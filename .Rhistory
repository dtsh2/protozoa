ylab(expression(paste(Pi))) + xlab(expression(paste(theta)))
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
multiplot(p5, p6, cols=2)
multiplot(p5, p6, cols=2)
rm(list = ls())
Pi_data<-read.csv('results.csv',header=T)
library(vegan)
fit <- manova(cbind(Species,Gene,Pi,Theta) ~ Zoonotic, data = Pi_data)
summary(fit, test="Pillai")
summary.aov(fit)
fit <- manova(cbind(Species,Pi,Theta) ~ Gene, data = Pi_data)
summary(fit, test="Pillai")
summary.aov(fit)
library(ggplot2)
gg_color_hue <- function(n) {
hues = seq(15, 375, length = n + 1)
hcl(h = hues, l = 65, c = 100)[1:n]
}
layout(matrix(c(1,2,2,3,4,4), nrow = 2, ncol = 3, byrow = TRUE))
n = 2
cols = gg_color_hue(n)
plot(Pi_data$Zoonotic,Pi_data$Pi,col=cols,ylab=expression(Pi))
n = 4
cols = gg_color_hue(n)
plot(Pi_data$Gene,Pi_data$Pi,col=cols,ylab=expression(Pi))
n = 2
cols = gg_color_hue(n)
plot(Pi_data$Zoonotic,Pi_data$Theta,col=cols,ylab=expression(theta))
n = 4
cols = gg_color_hue(n)
plot(Pi_data$Gene,Pi_data$Theta,col=cols,ylab=expression(theta))
gg_color_hue <- function(n) {
hues = seq(15, 375, length = n + 1)
hcl(h = hues, l = 65, c = 100)[1:n]
}
layout(matrix(c(1,2,2,3,4,4), nrow = 2, ncol = 3, byrow = TRUE))
#par(mfrow=c(2,2))
n = 2
cols = gg_color_hue(n)
plot(Pi_data$Zoonotic,Pi_data$Pi,col=cols,ylab=expression(Pi))
n = 4
cols = gg_color_hue(n)
plot(Pi_data$Gene,Pi_data$Pi,col=cols,ylab=expression(Pi))
n = 2
cols = gg_color_hue(n)
plot(Pi_data$Zoonotic,Pi_data$Theta,col=cols,ylab=expression(theta))
n = 4
cols = gg_color_hue(n)
plot(Pi_data$Gene,Pi_data$Theta,col=cols,ylab=expression(theta))
p1 <- ggplot(Pi_data, aes (x = Theta, y = Pi, colour = Zoonotic)) + stat_density_2d() +
ylab(expression(paste(Pi))) + xlab(expression(paste(theta)))
# require ('hexbin')
# ggplot(Pi_data, aes (x = Theta, y = Pi, fill = Zoonotic)) + stat_binhex (bins=2, aes (alpha = 0.5)) + ## NB alpha can be count
#   facet_grid (. ~ Zoonotic)
p2 <- ggplot(Pi_data, aes(x = Theta, y = Pi, colour = Zoonotic)) + geom_point() +
ylab(expression(paste(Pi))) + xlab(expression(paste(theta)))
# ggplot(Pi_data, aes(x = Theta, y = Pi)) + geom_point() + facet_grid(~Zoonotic)
p3 <- ggplot(Pi_data, aes (x = Theta, y = Pi, colour = Gene)) + stat_density_2d() +
ylab(expression(paste(Pi))) + xlab(expression(paste(theta)))
p4 <-ggplot(Pi_data, aes(x = Theta, y = Pi, colour = Gene)) + geom_point() +
ylab(expression(paste(Pi))) + xlab(expression(paste(theta)))
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
multiplot(p1, p2, p3, p4, cols=2)
newdata <- Pi_data[ which(Pi_data$Gene =='gp60'), ]
fit <- manova(cbind(Species,Pi,Theta) ~ Zoonotic, data = newdata)
summary(fit, test="Pillai")
summary.aov(fit)
par(mfrow=c(1,2))
n = 2
cols = gg_color_hue(n)
plot(newdata$Zoonotic,newdata$Pi,col=cols,ylab=expression(Pi))
plot(newdata$Zoonotic,newdata$Theta,col=cols,ylab=expression(theta))
p5 <- ggplot(newdata, aes (x = Theta, y = Pi, colour = Zoonotic)) + stat_density_2d() +
ylab(expression(paste(Pi))) + xlab(expression(paste(theta)))
p6 <- ggplot(newdata, aes(x = Theta, y = Pi, colour = Zoonotic)) + geom_point() +
ylab(expression(paste(Pi))) + xlab(expression(paste(theta)))
multiplot(p5, p6, cols=2)
rm(list = ls())
library(phytools)
library(ape)
par(mfrow=c(1,2))
tree = read.tree("gp60.tre")
x<-tree$tip.label
x1 = sapply(strsplit(x, split='_', fixed=TRUE),function(x) (x[3]))
tree$tip.label<-x1
tree<-ladderize(tree)
colorCodes <- c(rainbow(length(unique(tree$tip.label))))
names(colorCodes)<-unique(tree$tip.label)
plotTree(tree,ftype="off",main='Species')
add.scale.bar(x=0.5,y=1)
tiplabels(#x1, # if text
col = colorCodes[tree$tip.label],bg=NA,frame = 'none',pch=16)
add.simmap.legend(colors=colorCodes,vertical=T,x=0.8,y=550,
y=-1,prompt=FALSE)
tree = read.tree("gp60.tre")
x<-tree$tip.label
x1 = sapply(strsplit(x, split='_', fixed=TRUE),function(x) (x[2]))
tree$tip.label<-x1
tree<-ladderize(tree)
colorCodes <- c(rainbow(length(unique(tree$tip.label))))
names(colorCodes)<-unique(tree$tip.label)
plotTree(tree,ftype="off")
add.scale.bar(x=0.5,y=1)
tiplabels(#x1, # if text
col = colorCodes[tree$tip.label],bg=NA,frame = 'none',pch=16)
add.simmap.legend(colors=colorCodes,vertical=T,x=0.8,y=550,
y=-1,prompt=FALSE)
par(mfrow=c(1,1))
colorCodes <- c(1,2,rep(1,13))
names(colorCodes)<-unique(tree$tip.label)
plotTree(tree,ftype="off")
add.scale.bar(x=0.5,y=1)
tiplabels(#x1, # if text
col = colorCodes[tree$tip.label],bg=NA,frame = 'none',pch=16)
add.simmap.legend(colors=colorCodes,vertical=T,x=0.8,y=550,
y=-1,prompt=FALSE)
tree
cophenetic(tree)
res<-cophenetic(tree)
plot(res)
d <- dist(mydata) # euclidean distances between the rows
fit <- cmdscale(d,eig=TRUE, k=2) # k is the number of dim
fit # view results
# plot solution
x <- fit$points[,1]
y <- fit$points[,2]
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2",
main="Metric	MDS",	type="n")
text(x, y, labels = row.names(mydata), cex=.7)
require(graphics)
loc <- cmdscale(eurodist)
x <- loc[, 1]
y <- -loc[, 2] # reflect so North is at the top
plot(x, y, type = "n", xlab = "", ylab = "", asp = 1, axes = FALSE,
main = "cmdscale(eurodist)")
text(x, y, rownames(loc), cex = 0.6)
head(loc)
head(res)
class(res)
dim(res)
plot(res)
tree = read.tree("gp60.tre")
res<-cophenetic(tree)
head(res)
plot(res)
cmdscale(res)
res_mds<-cmdscale(res)
x <- res_mds[, 1]
y <- -res_mds[, 2] # reflect so North is at the top
y <- res_mds[, 2] # reflect so North is at the top
plot(x, y, type = "n", xlab = "", ylab = "", asp = 1, axes = FALSE,
main = "cmdscale(eurodist)")
text(x, y, rownames(loc), cex = 0.6)
rownames(res_mds)
plot(x, y, type = "n", xlab = "", ylab = "", asp = 1, axes = T,
main = "MDS plot")
plot(x, y, type = "n", xlab = "", ylab = "", axes = T,
main = "MDS plot")
plot(x, y, type = "n", xlab = "", ylab = "", axes = T,
main = "MDS plot")
x1 = sapply(strsplit(rownames(res_mds), split='_', fixed=TRUE),function(x) (x[3]))
text(x, y, rownames(x1), cex = 0.6)
x1
x1 = sapply(strsplit(rownames(res_mds), split='_', fixed=TRUE),function(x) (x[2]))
text(x, y, x1, cex = 0.6)
colorCodes <- c(rainbow(length(unique(x1))))
text(x, y, x1, cex = 0.6,col = colorCodes)
x1
colorCodes
level(colorCodes)
levels(colorCodes)
colorCodes[1]
colorCodes[2]
level(x1)
levels(x1)
class(x1)
as.factor(x1)
text(x, y, x1, cex = 0.6,col = colorCodes[as.factor(x1)])
?points
points(x, y, x1, cex = 0.6,pch = 1,col = colorCodes[as.factor(x1)])
plot(x, y, type = "n", xlab = "", ylab = "", axes = T,
main = "MDS plot")
x1 = sapply(strsplit(rownames(res_mds), split='_', fixed=TRUE),function(x) (x[2]))
colorCodes <- c(rainbow(length(unique(x1))))
points(x, y, x1, cex = 0.6,pch = 1,col = colorCodes[as.factor(x1)])
text(x, y, x1, cex = 0.6,pch = 1,col = colorCodes[as.factor(x1)])
text(x, y, x1, cex = 0.6,pch = 1,col = rev(colorCodes[as.factor(x1)]))
plot(x, y, type = "n", xlab = "", ylab = "", axes = T,asp=1,
main = "MDS plot")
text(x, y, x1, cex = 0.6,pch = 1,col = rev(colorCodes[as.factor(x1)]))
text(x, y, x1, cex = 1,pch = 1,col = rev(colorCodes[as.factor(x1)]))
text(x, y, x1, cex = 1,col = rev(colorCodes[as.factor(x1)]))
res<-cophenetic(tree)
res_mds<-cmdscale(res)
x <- res_mds[, 1]
y <- res_mds[, 2]
x1 = sapply(strsplit(rownames(res_mds), split='_', fixed=TRUE),function(x) (x[2]))
colorCodes <- c(rainbow(length(unique(x1))))
plot(x, y, type = "n", xlab = "", ylab = "", axes = T,asp=1,
main = "MDS plot")
text(x, y, x1, cex = 1,col = rev(colorCodes[as.factor(x1)]))
rev(colorCodes[as.factor(x1)])
ress<-cbind(rev(colorCodes[as.factor(x1)]),x1)
ress
x1
levels(x1)
level(x1)
levels(as.factor(x1))
as.numeric(levels(as.factor(x1)))
(levels(as.factor(x1)))[1]
levels(as.factor(x1))
level(as.factor(x1))
level(as.factor(x1))<-1:15
levels(as.factor(x1))<-1:15
levels(as.factor(x1))
as.numeric(levels(as.factor(x1)))
as.list(levels(as.factor(x1)))
colorCodes[as.factor(x1)])
st(levels(as.factor(x1))\
(levels(as.factor(x1))
)
colorCodes[as.factor(x1)]
text(x, y, x1, cex = 1,col = colorCodes[as.factor(x1)])
plot(x, y, type = "n", xlab = "", ylab = "", axes = T,asp=1,
main = "MDS plot")
text(x, y, x1, cex = 1,col = colorCodes[as.factor(x1)])
colorCodes <- c(rainbow(rev(length(unique(x1)))))
plot(x, y, type = "n", xlab = "", ylab = "", axes = T,asp=1,
main = "MDS plot")
text(x, y, x1, cex = 1,col = colorCodes[as.factor(x1)])
points(x, y, cex = 1,col = colorCodes[as.factor(x1)])
plot(x, y, type = "n", xlab = "", ylab = "", axes = T,asp=1,
main = "MDS plot")
points(x, y, cex = 1,col = colorCodes[as.factor(x1)])
points(x, y, cex = 3,col = colorCodes[as.factor(x1)])
plot(x, y, type = "n", xlab = "", ylab = "", axes = T,asp=1,
main = "MDS plot")
points(x, y, cex = 3,col = colorCodes[as.factor(x1)])
points(x,jitter(y), cex = 3,col = colorCodes[as.factor(x1)])
plot(x, y, type = "n", xlab = "", ylab = "", axes = T,asp=1,
main = "MDS plot")
points(x,jitter(y), cex = 3,col = colorCodes[as.factor(x1)])
points(x,jitter(y), cex = 4,col = colorCodes[as.factor(x1)])
points(x,jitter(y), cex = 1.5,col = colorCodes[as.factor(x1)])
plot(x, y, type = "n", xlab = "", ylab = "", axes = T,asp=1,
main = "MDS plot")
points(x,jitter(y), cex = 1.5,col = colorCodes[as.factor(x1)])
points(x,jitter(y), cex = 1.5,col = colorCodes[as.factor(x1)])
?jitter
points(x,jitter(y,5), cex = 1.5,col = colorCodes[as.factor(x1)])
points(jitter(x,y, cex = 1.5,col = colorCodes[as.factor(x1)]))
points(x,y, cex = 1.5,col = colorCodes[as.factor(x1)])
points(x,y, cex = 1.5,pch=16,col = colorCodes[as.factor(x1)])
plot(tree)
tree = read.tree("gp60.tre")
res<-cophenetic(tree)
res_mds<-cmdscale(res)
x <- res_mds[, 1]
y <- res_mds[, 2]
x1 = sapply(strsplit(rownames(res_mds), split='_', fixed=TRUE),function(x) (x[2]))
colorCodes <- c(rainbow(length(unique(x1))))
plot(x, y, type = "n", xlab = "", ylab = "", axes = T,asp=1,
main = "MDS plot")
points(x,y, cex = 1.5,pch=16,col = colorCodes[as.factor(x1)])
?legend
head(res)
head(res_mds)
tree = read.tree("gp60.tre")
res<-cophenetic(tree)
res_mds<-cmdscale(res)
x <- res_mds[, 1]
y <- res_mds[, 2]
x1 = sapply(strsplit(rownames(res_mds), split='_', fixed=TRUE),function(x) (x[2]))
colorCodes <- c(rainbow(length(unique(x1))))
plot(x, y, type = "n", xlab = "", ylab = "", axes = T,asp=1,
main = "MDS plot")
points(x,y, cex = 1.5,pch=16,col = colorCodes[as.factor(x1)])
legend('topleft',unique(x1),colorCodes)
legend('topleft', x1,colorCodes)
x1
legend('topleft', unique(x1),col = colorCodes[levels(as.factor(x1)]))
legend('topleft', unique(x1),col = colorCodes(levels(as.factor(x1)]))
legend('topleft', unique(x1),col = colorCodes(levels(as.factor(x1))))
legend('topleft', unique(x1),col = colorCodes(as.factor(unique(x1))))
legend('topleft', unique(x1),col = colorCodes[as.factor(unique(x1))])
col = colorCodes[as.factor(x1)]
col
unique(x1)
legend('topleft', unique(x1),col = colorCodes)
legend('topleft', unique(x1),col = colorCodes,pch=16)
text(x, y, x1, cex = 1,col = colorCodes[as.factor(x1)])
[as.factor(x1)]
as.factor(x1)
tree = read.tree("gp60.tre")
res<-cophenetic(tree)
res_mds<-cmdscale(res)
x <- res_mds[, 1]
y <- res_mds[, 2]
x1 = sapply(strsplit(rownames(res_mds), split='_', fixed=TRUE),function(x) (x[2]))
colorCodes <- c(rainbow(length(unique(x1))))
plot(x, y, type = "n", xlab = "", ylab = "", axes = T,asp=1,
main = "MDS plot")
points(x,y, cex = 1.5,pch=16,col = colorCodes[as.factor(x1)])
as.factor(x1)
legend('topleft', unique(x1),col = colorCodes(as.factor(x1)),pch=16)
legend('topleft', unique(x1),col = colorCodes(levels(as.factor(x1))),pch=16)
levels(as.factor(x1))
num<-levels(as.factor(x1))
num
levels(num)
as.character(num)
as.character(levels(num)0
as.character(levels(num))
as.numeric(levels(x1)[x1])
as.numeric(levels(x1))
as.numeric(levels(as.factor(x1)))
as.numeric(levels(as.factor(x1))[x1])
as.integer(levels(as.factor(x1))[x1])
as.integer(levels(as.factor(x1))
)
as.integer(as.factor(x1))
as.integer(levels(as.factor(x1)))
legend('topleft', unique(x1),col = colorCodes(as.integer(as.factor(x1))),pch=16)
points(x,y, cex = 1.5,pch=16,col = colorCodes[as.factor(x1)])
as.integer(as.factor(x1))
as.integer(levels(as.factor(x1)))
(levels(as.factor(x1)))
as.integer(as.character(levels(as.factor(x1))))
as.integer(as.character(as.factor(x1)))
as.integer(as.factor(x1))
legend('topleft', unique(x1),col = colorCodes(as.integer(as.factor(x1))),pch=16)
tree = read.tree("gp60.tre")
res<-cophenetic(tree)
res_mds<-cmdscale(res)
x <- res_mds[, 1]
y <- res_mds[, 2]
x1 = sapply(strsplit(rownames(res_mds), split='_', fixed=TRUE),function(x) (x[2]))
colorCodes <- c(rainbow(length(unique(x1))))
plot(x, y, type = "n", xlab = "", ylab = "", axes = T,asp=1,
main = "MDS plot")
points(x,y, cex = 1.5,pch=16,col = colorCodes[as.factor(x1)])
legend('topleft', unique(x1),col = colorCodes(as.integer(as.factor(x1))),pch=16)
colorCodes
legend('topleft', unique(x1),col = colorCodes[as.integer(as.factor(x1))],pch=16)
levels(as.factor(x1))
legend('topleft', unique(x1),col = colorCodes[as.integer(levels(as.factor(x1)))],pch=16)
levels(as.factor(x1))
as.numeric(levels(as.factor(x1))0
as.numeric(levels(as.factor(x1)))
as.numeric(as.integer(levels(as.factor(x1)))))
as.numeric(as.integer(levels(as.factor(x1))))
unique(as.integer(levels(as.factor(x1))))
unique(as.integer(as.factor(x1)))
legend('topleft', unique(x1),col = colorCodes[unique(as.integer(as.factor(x1)))],pch=16)
tree = read.tree("gp60.tre")
res<-cophenetic(tree)
getwd()
tree = read.tree("gp60.tre")
rm(list = ls())
library(phytools)
library(ape)
tree = read.tree("gp60.tre")
res<-cophenetic(tree)
res_mds<-cmdscale(res)
x <- res_mds[, 1]
y <- res_mds[, 2]
x1 = sapply(strsplit(rownames(res_mds), split='_', fixed=TRUE),function(x) (x[2]))
colorCodes <- c(rainbow(length(unique(x1))))
plot(x, y, type = "n", xlab = "", ylab = "", axes = T,asp=1,
main = "MDS plot")
points(x,y, cex = 1.5,pch=16,col = colorCodes[as.factor(x1)])
?cmdscale
rm(list = ls())
Pi_data<-read.csv('results.csv',header=T)
library(vegan)
fit <- manova(cbind(Species,Gene,Pi,Theta) ~ Zoonotic, data = Pi_data)
summary(fit, test="Pillai")
summary.aov(fit)
Pi_data$Species
(cbind(Species,Gene,Pi,Theta) )
with(Pi_data,cbind(Species,Gene,Pi,Theta))
Pi_data
?manova
library(vegan)
?manova
rm(list = ls())
Pi_data<-read.csv('results.csv',header=T)
Pi_data
getwd()
rm(list = ls())
Pi_data<-read.csv('results.csv',header=T)
library(vegan)
fit <- manova(cbind(Species,Gene,Pi,Theta) ~ Zoonotic, data = Pi_data)
summary(fit, test="Pillai")
summary.aov(fit)
fit <- manova(cbind(Species,Pi,Theta) ~ Gene, data = Pi_data)
summary(fit, test="Pillai")
summary.aov(fit)
p1 <- ggplot(Pi_data, aes (x = Theta, y = Pi, colour = Zoonotic)) + stat_density_2d() +
ylab(expression(paste(Pi))) + xlab(expression(paste(theta)))
require ("ggplot2")
p1 <- ggplot(Pi_data, aes (x = Theta, y = Pi, colour = Zoonotic)) + stat_density_2d() +
ylab(expression(paste(Pi))) + xlab(expression(paste(theta)))
p2 <- ggplot(Pi_data, aes(x = Theta, y = Pi, colour = Zoonotic)) + geom_point() +
ylab(expression(paste(Pi))) + xlab(expression(paste(theta)))
p3 <- ggplot(Pi_data, aes (x = Theta, y = Pi, colour = Gene)) + stat_density_2d() +
ylab(expression(paste(Pi))) + xlab(expression(paste(theta)))
p4 <-ggplot(Pi_data, aes(x = Theta, y = Pi, colour = Gene)) + geom_point() +
ylab(expression(paste(Pi))) + xlab(expression(paste(theta)))
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
multiplot(p1, p2, p3, p4, cols=2)
ggplot(Pi_data, aes(x = Theta, y = Pi, colour = Gene)) + geom_point() +
p2 <- ggplot(Pi_data, aes(x = Theta, y = Pi, colour = Zoonotic)) + geom_point() +
ylab(expression(paste(Pi))) + xlab(expression(paste(theta)))
p2 <- ggplot(Pi_data, aes(x = Theta, y = Pi, colour = Gene)) + geom_point() +
ylab(expression(paste(Pi))) + xlab(expression(paste(theta)))
p2
p2 <- ggplot(Pi_data, aes(x = Theta, y = Pi, colour = Gene)) + stat_density_2d() +
ylab(expression(paste(Pi))) + xlab(expression(paste(theta)))
p2
names(Pi_data)
p2 <- ggplot(Pi_data, aes(x = Theta, y = Pi, colour = Species)) + stat_density_2d() +
ylab(expression(paste(Pi))) + xlab(expression(paste(theta)))
p2
rm(list = ls())
library(phytools)
library(ape)
par(mfrow=c(1,2))
tree = read.tree("gp60.tre")
x<-tree$tip.label
tree
